name: build-pipeline
run-name: |
  Run ${{ github.run_number }} on ${{ github.ref_name }} by ${{ github.actor }}
on:
  push
env:
  APP_NAME: hello-app
  PACKAGE_PREFIX_PATTERN: hello_app-[0-9].[0-9]
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_DIST_DIR: ${{ github.workspace }}/build-artifacts
    steps:
      - run: |
          echo "Starting Job ${{ github.job }}"
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Build Python packages
        id: build-packages-action
        uses: ./.github/actions/build-packages
        with:
          app-src-dir: ${{ env.APP_SRC_DIR }}
          build-output-dir: ${{ env.BUILD_DIST_DIR }}
          package-name-patterns: |
            ${{ env.package_common_pattern }}*.whl
            ${{ env.package_common_pattern }}*.tar.gz
        env:
          APP_SRC_DIR: ${{ github.workspace }}/src/${{ env.APP_NAME }}
          package_common_pattern:
            ${{ env.BUILD_DIST_DIR }}/${{ env.PACKAGE_PREFIX_PATTERN }}
      - name: Cleanup environment
        uses: ./.github/actions/cleanup-env
        with:
          rm-dirs: ${{ env.BUILD_DIST_DIR }}
          clean-pipenv: true
      - run: |
          echo "Job ${{ github.job }} finished with status ${{ job.status }}."
    outputs:
      artifact-name: ${{ steps.build-packages-action.outputs.artifact-name }}


  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        package_pattern: ["*.whl", "*.tar.gz"]
    env:
      ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
      PYTEST_ROOT_DIR: ${{ github.workspace }}/pytest-root
    steps:
    - run: |
        echo "Starting Job ${{ github.job }}"
    - name: Check out repository code
      uses: actions/checkout@v4
    - name: Test Python package
      id: test-package-action
      uses: ./.github/actions/test-package
      with:
        app-test-dir: ${{ env.APP_TEST_DIR }}
        pytest-root-dir: ${{ env.PYTEST_ROOT_DIR }}
        artifacts-dir: ${{ env.ARTIFACTS_DIR }}
        package-name-pattern:
          ${{ env.PACKAGE_PREFIX_PATTERN }}${{ matrix.package_pattern }}
        artifact-name: ${{ needs.build.outputs.artifact-name }}
        coverage: true
        coverage-importable-name: hello
      env:
        APP_TEST_DIR: ${{ github.workspace }}/src/pytest
    - name: Cleanup environment
      uses: ./.github/actions/cleanup-env
      with:
        rm-dirs:
          ${{ env.ARTIFACTS_DIR }}
          ${{ env.PYTEST_ROOT_DIR }}
        clean-pipenv: true
    - run: |
        echo "Job ${{ github.job }} finished with status ${{ job.status }}."
