name: build-pipeline
run-name: >
  Run ${{ github.run_number }}: ${{ github.event_name }}
  on ${{ github.ref_name }} by ${{ github.actor }}
on:
  push:
  workflow_call:
    inputs:
      commit-sha:
        description: 'target commit SHA'
        required: false
        type: string
        default: ''
      artifact-name:
        description: |
          'artifact name for actions/upload-artifact.
          default: dev-packages-run-<run_number>.'
        required: false
        type: string
        default: dev-packages-run-${{ github.run_number }}
    outputs:
      # useful in case downloading the artifact is done in different
      # jobs/workflows without the need for hard coding the value everywhere
      artifact-name:
        description: |
          'artifact name for actions/upload-artifact, actions/download-artifact.
          if the jobs are successful, this will be same value as
          inputs.artifact-name, otherwise either of the jobs had failed.'
        value: ${{ !contains(jobs.*.result, 'failure') &&
                    jobs.build.outputs.artifact-name || '' }}
      # useful for identifying packaged files for use in different
      # jobs/workflows without the need for hard coding the value everywhere
      package-name-patterns:
        description: |
          'the patterns to identify packaged files which will be used in caller workflows.
          relative to artifacts/assets dir
          this will be formatted as a JSON string.
          example:
            "["**/app-*.whl","./app-[0-9].[0-9]*.tar.gz"]"
          depends on jobs success, otherwise the value is empty string.'
        value: ${{ !contains(jobs.*.result, 'failure') &&
                    jobs.build.outputs.package-name-patterns || '' }}
env:
  APP_NAME: hello-app
  PACKAGE_PREFIX_PATTERN: hello_app-[0-9].[0-9]
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_DIST_DIR: ${{ github.workspace }}/build-artifacts
    steps:
      - run: |
          echo "Starting Job ${{ github.job }}"
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit-sha }}
      - name: Build Python packages
        id: build-packages-action
        uses: ./.github/actions/build-packages
        with:
          app-src-dir: ${{ env.APP_SRC_DIR }}
          build-output-dir: ${{ env.BUILD_DIST_DIR }}
          package-name-patterns: |
            ${{ env.PACKAGE_PREFIX_PATTERN }}*.whl
            ${{ env.PACKAGE_PREFIX_PATTERN }}*.tar.gz
          artifact-name: ${{ env.artifact-name }}
        env:
          APP_SRC_DIR: ${{ github.workspace }}/src/${{ env.APP_NAME }}
          artifact-name: |
            ${{ inputs.artifact-name && inputs.artifact-name ||
            format('dev-packages-run-{0}', github.run_number) }}
      - name: Cleanup environment
        uses: ./.github/actions/cleanup-env
        with:
          rm-dirs: ${{ env.BUILD_DIST_DIR }}
          clean-pipenv: true
      - run: |
          echo "Job ${{ github.job }} finished with status ${{ job.status }}."
    outputs:
      artifact-name: ${{ steps.build-packages-action.outputs.artifact-name }}
      package-name-patterns: ${{ steps.build-packages-action.outputs.package-name-patterns }}


  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        package_pattern: ${{ fromJson(needs.build.outputs.package-name-patterns) }}
    env:
      ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
      PYTEST_ROOT_DIR: ${{ github.workspace }}/pytest-root
    steps:
    - run: |
        echo "Starting Job ${{ github.job }}"
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit-sha }}
    - name: Test Python package
      id: test-package-action
      uses: ./.github/actions/test-package
      with:
        app-test-dir: ${{ env.APP_TEST_DIR }}
        pytest-root-dir: ${{ env.PYTEST_ROOT_DIR }}
        artifacts-dir: ${{ env.ARTIFACTS_DIR }}
        package-name-pattern: ${{ matrix.package_pattern }}
        artifact-name: ${{ needs.build.outputs.artifact-name }}
        coverage: true
        coverage-importable-name: hello
      env:
        APP_TEST_DIR: ${{ github.workspace }}/src/pytest
    - name: Cleanup environment
      uses: ./.github/actions/cleanup-env
      with:
        rm-dirs:
          ${{ env.ARTIFACTS_DIR }}
          ${{ env.PYTEST_ROOT_DIR }}
        clean-pipenv: true
    - run: |
        echo "Job ${{ github.job }} finished with status ${{ job.status }}."
