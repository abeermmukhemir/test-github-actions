name: build-packages
description: |
  Build Python app.
  Will do:
    - setup the needed environment for build
    - lint the src code with flake8
    - build src code to generate .whl and .tar.gz packages
    - upload generated packages to artifactory for future use
  depends on  ./.github/actions/setup-env
inputs:
  app-src-dir:
    description: |
      'Source code directory for the application.'
    required: false
    default: '.'
  build-output-dir:
    description: |
      'Output directory for the build.'
    required: false
    default: './build'
  package-name-patterns:
    description: |
      'Output packages patterns, this will be used to upload
      matched packages to artifactory using actions/upload-artifact.
      the value for this should be relative to build-output-dir.
      for examples:
        package-name-pattern: |
          **/app-*.whl
          ./app-[0-9].[0-9]*.tar.gz
      the default is to upload all contents of build-output-dir.'
    required: false
    default: '*'
  artifact-name:
    description: |
      'artifact name for actions/upload-artifact.
      default: app-packages.'
    required: false
    default: app-packages
  retention-days:
    description: |
      'retention days for uploaded artifact.'
    required: false
    default: 1
outputs:
  # useful in case downloading the artifact is done in different
  # jobs/workflows without the need for hard coding the value everywhere
  artifact-name:
    description: |
      'artifact name for actions/upload-artifact
      if uploading the artifact is successful, this will be same value as
      inputs.artifact-name, otherwise the upload had failed.'
    value: ${{ steps.get-artifact-name.outputs.artifact-name }}
  # useful for identifying packaged files for use in different
  # jobs/workflows without the need for hard coding the value everywhere
  package-name-patterns:
    description: |
      'the patterns to identify packaged files which will be used in caller workflows.
      this would be the same values in inputs.package-name-patterns but formatted
      as a JSON string.
      example:
        "["**/app-*.whl", "./app-[0-9].[0-9]*.tar.gz"]"
      '
    value: ${{ steps.get-package-name-patterns.outputs.package-name-patterns }}
runs:
  using: 'composite'
  steps:
    - name: Setup environment
      id: use-setup-action
      uses: ./.github/actions/setup-env
      with:
        setup-python: true
        python-version: '3.10'
        use-pipenv: true
        python-dependencies:
          flake8
          build
    - name: "Debug: outputs from ./.github/actions/setup-env"
      run: |
        echo '${{ toJson(steps.use-setup-action.outputs) }}'
      shell: bash
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        pipenv run flake8 ${{ inputs.app-src-dir }} --count --show-source \
          --max-line-length=80 --statistics
      shell: bash
    - name: Build package
      run: |
        pipenv run python -m build -o ${{ inputs.build-output-dir }} \
          ${{ inputs.app-src-dir }}
      shell: bash
    - name: "Debug: List created packages"
      run: |
        ls ${{ inputs.build-output-dir }}
      shell: bash
    - id: get-full-patterns
      # prepare yourself for the worst hack ever
      run: |
        full_patterns="$(echo '${{ inputs.package-name-patterns }}' | \
          tr -s '\n' | \
          awk '{print "${{ inputs.build-output-dir }}/"$0}' | \
          tr '\n' ' ' | \
          sed 's/[[:space:]]/\", \"/')"
        echo "full-patterns="[\"${full_patterns}\"]"" >> $GITHUB_OUTPUT
      shell: bash
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ env.path-patterns }}
        if-no-files-found: error
        retention-days: ${{ inputs.retention-days }}
        overwrite: true
      env:
        path-patterns: |
          ${{ join(fromJSON(steps.get-full-patterns.outputs.full-patterns), '
          ') }}
    - if: ${{ success() }}
      id: get-artifact-name
      run: |
        echo "artifact-name=${{ inputs.artifact-name }}" >> $GITHUB_OUTPUT
      shell: bash
    - if: ${{ success() }}
      id: get-package-name-patterns
      run: |
        full_patterns="$(echo '${{ inputs.package-name-patterns }}' | \
          tr -s '\n' | tr '\n' ' ' | \
          sed 's/[[:space:]]/\", \"/')"
        echo "package-name-patterns="[\"${full_patterns}\"]"" \
          >> $GITHUB_OUTPUT
      shell: bash
